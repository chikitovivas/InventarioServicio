/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package inventarioh.MenuBar.Configuracion;

import DB.Familia;
import DB.Status;
import interfazNueva.menubar;
import java.awt.Color;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.concurrent.Callable;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author Usuario
 */
public class AgregarEditar_estatus extends javax.swing.JFrame {
    //Nueva statement
    Statement stmt = null;
    //Nuevo ResultSet
    ResultSet rs = null;
    //Variable conexion a la DB
    Connection con = null;
    /**
     * Creates new form AgregarEditar_status
     */
    public AgregarEditar_estatus(Connection con) throws SQLException {
        initComponents();
        //Conexion a la DB
        this.con = con;
        /* Titulo del Jframe */
        this.setTitle("Estatus condicion Ubicacion/Fisico");
        //Creamos un nuevo statement
        stmt = con.createStatement(); 
        //Combobox Estatus
        Status ca = new Status(con);
        //Se obtienen todas las descripciones de las categorias
        rs = ca.getAll_ubicacion();
             
        // Anadimos cada una de las categorias al combobox Categoria
        while(rs.next()){
            this.Estatus.add(rs.getString("descripcion"));
        } 
        
                    /* Botones */
        this.guardar.setVisible(false);
        this.cancelar.setVisible(false);
            /* Background */
        this.id.setBackground(Color.lightGray);
        this.descripcion.setBackground(Color.lightGray);
            /* Color del texto en Disabled */
        this.id.setDisabledTextColor(Color.black);
        this.descripcion.setDisabledTextColor(Color.black);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        id = new javax.swing.JTextField();
        agregar = new javax.swing.JButton();
        editar = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        descripcion = new javax.swing.JTextField();
        guardar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        cancelar = new javax.swing.JButton();
        Estatus = new java.awt.List();
        select_estatus = new javax.swing.JComboBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        id.setEnabled(false);

        agregar.setText("+");
        agregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agregarActionPerformed(evt);
            }
        });

        editar.setText("Editar");
        editar.setPreferredSize(new java.awt.Dimension(71, 23));
        editar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editarActionPerformed(evt);
            }
        });

        jLabel2.setText("Descripcion:");

        jLabel6.setText("Estatus");

        descripcion.setEnabled(false);

        guardar.setText("Guardar");
        guardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarActionPerformed(evt);
            }
        });

        jLabel1.setText("ID:");

        cancelar.setText("Cancelar");
        cancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelarActionPerformed(evt);
            }
        });

        Estatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EstatusActionPerformed(evt);
            }
        });

        select_estatus.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Ubicación", "Físico" }));
        select_estatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                select_estatusActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 131, Short.MAX_VALUE)
                        .addComponent(agregar))
                    .addComponent(Estatus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(id, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(descripcion, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(select_estatus, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(cancelar)
                        .addGap(18, 18, 18)
                        .addComponent(guardar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(editar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(agregar)
                    .addComponent(select_estatus, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(49, 49, 49)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(id, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(17, 17, 17)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(descripcion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 81, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(editar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cancelar)
                            .addComponent(guardar)))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Estatus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );

        setSize(new java.awt.Dimension(530, 294));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void agregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agregarActionPerformed
        //Creamos un nueva Callable (Creamos una variable que guarda funciones)
        Callable<Void> prueba = new Callable<Void>() {
                //Funcion call(), la que se ejecutara desde la variable
            public Void call() {
                reanudar();
                borrar();
                return null;
            }
        };
        //Abrimos un nuevo Jframe para agregar categoria
        Agregar_estatus pantalla;
        try {
            pantalla = new Agregar_estatus(this.select_estatus,this.Estatus,this.con,prueba);
            pantalla.setVisible(true);
        } catch (SQLException ex) {
            Logger.getLogger(AgregarEditar_estatus.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_agregarActionPerformed

    private void editarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editarActionPerformed
        //Habilita los campos de descripcion y los botones de guardar y cancelar
        if(this.Estatus.getSelectedIndex() != -1){
            this.descripcion.enable(true);
            this.guardar.setVisible(true);
            this.cancelar.setVisible(true);
            this.editar.setVisible(false);
            this.descripcion.setBackground(Color.white); 
        }
    }//GEN-LAST:event_editarActionPerformed

    private void guardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarActionPerformed
        //Clase Categoria
        Status cat = new Status(con);
        if(this.select_estatus.getSelectedItem().equals("Ubicación")){
            //Si se Guarda la categoria Exitosamente
            if(cat.actualizar_status_ubicacion(this.id.getText().toString(),this.descripcion.getText().toString())){
                JOptionPane.showMessageDialog(null, "Estatus actualizada Exitosamente");
            }else{
                JOptionPane.showMessageDialog(null, "No se actualizo el estatus.","Error al actualizar"
                ,JOptionPane.ERROR_MESSAGE);
            } 
            //Remueve todos los Items del ComboBox Categoria
            this.Estatus.removeAll();
            //Y se agregan las nuevas categorias al comboBox pero actualizado
            try {
                //Nueva Clase Categoria
                Status ca = new Status(con);
                //Se obtienen todas las descripciones de las categorias
                rs = ca.getAll_ubicacion();    
                // Anadimos cada una de las categorias al combobox Categoria
                while(rs.next()){
                    this.Estatus.add(rs.getString("descripcion"));
                }

            } catch (SQLException ex) {
                Logger.getLogger(AgregarEditar_estatus.class.getName()).log(Level.SEVERE, null, ex);
            }
        }else{
            //Si se Guarda la categoria Exitosamente
            if(cat.actualizar_status_fisico(this.id.getText().toString(),this.descripcion.getText().toString())){
                JOptionPane.showMessageDialog(null, "Estatus actualizada Exitosamente");
            }else{
                JOptionPane.showMessageDialog(null, "No se actualizo el estatus.","Error al actualizar"
                ,JOptionPane.ERROR_MESSAGE);
            }    
            //Remueve todos los Items del ComboBox Categoria
            this.Estatus.removeAll();
            //Y se agregan las nuevas categorias al comboBox pero actualizado
            try {
                //Nueva Clase Categoria
                Status ca = new Status(con);
                //Se obtienen todas las descripciones de las categorias
                rs = ca.getAll_fisico();    
                // Anadimos cada una de las categorias al combobox Categoria
                while(rs.next()){
                    this.Estatus.add(rs.getString("descripcion"));
                }

            } catch (SQLException ex) {
                Logger.getLogger(AgregarEditar_estatus.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
        //Se borran los campos descripcion y id de categorias
        this.borrar();
        //Se borran los campos descripcion, id, codigo de Subcategorias
        this.reanudar();
    }//GEN-LAST:event_guardarActionPerformed

    private void cancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelarActionPerformed
        //Reanudo los campos de Categoria a deshabilitados
        this.reanudar();
    }//GEN-LAST:event_cancelarActionPerformed

    private void EstatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EstatusActionPerformed
        if(this.Estatus.getItemCount() != 0){//Entra en la condicion si hay mas de un Item en el ComboBox
            //Buscar el id de estatus con respecto a la descripcion
            Status cat = new Status(con);
            if(this.select_estatus.getSelectedItem().equals("Ubicación")){
                //Busqueda de DB, para la esattus seleccionada, y llenar los campos
                ResultSet cate = cat.get_ubicacion(Estatus.getSelectedItem().toString());
                try {
                    this.id.setText(cate.getString("idEstatus_ubicacion"));
                    this.descripcion.setText(cate.getString("descripcion"));
                } catch (SQLException ex) {
                    Logger.getLogger(AgregarEditar_familia.class.getName()).log(Level.SEVERE, null, ex);
                }                
            }else{
                //Busqueda de DB, para la esatus seleccionada, y llenar los campos
                ResultSet cate = cat.get_fisico(Estatus.getSelectedItem().toString());
                try {
                    this.id.setText(cate.getString("idEstatus_fisico"));
                    this.descripcion.setText(cate.getString("descripcion"));
                } catch (SQLException ex) {
                    Logger.getLogger(AgregarEditar_familia.class.getName()).log(Level.SEVERE, null, ex);
                }  
            }

            //Cambios graficos al cambiar una categoria
            this.reanudar();           
        }
    }//GEN-LAST:event_EstatusActionPerformed

    private void select_estatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_select_estatusActionPerformed
         //Remueve todos los Items del ComboBox Estatus
        this.Estatus.removeAll();
        if(this.select_estatus.getSelectedItem().equals("Ubicación")){
            //Y se agregan las nuevas estatus al comboBox pero actualizado
            try {
                //Nueva Clase estatus
                Status ca = new Status(con);
                //Se obtienen todas las descripciones de las estatus
                rs = ca.getAll_ubicacion();    
                // Anadimos cada una de las estatus al combobox estatus
                while(rs.next()){
                    this.Estatus.add(rs.getString("descripcion"));
                }
            } catch (SQLException ex) {
                Logger.getLogger(AgregarEditar_familia.class.getName()).log(Level.SEVERE, null, ex);
            }
        }else{
            //Y se agregan las nuevas estatus al comboBox pero actualizado
            try {
                //Nueva Clase estatus
                Status ca = new Status(con);
                //Se obtienen todas las descripciones de las estatus
                rs = ca.getAll_fisico();    
                // Anadimos cada una de las estatus al combobox estatus
                while(rs.next()){
                    this.Estatus.add(rs.getString("descripcion"));
                }
            } catch (SQLException ex) {
                Logger.getLogger(AgregarEditar_familia.class.getName()).log(Level.SEVERE, null, ex);
            }         
        }

        //Se borran los campos descripcion y id de categorias
        this.borrar();
        //Se borran los campos descripcion, id, codigo de Subcategorias
        this.reanudar();
    }//GEN-LAST:event_select_estatusActionPerformed
    private void reanudar(){
        this.guardar.setVisible(false);
        this.cancelar.setVisible(false);
        this.editar.setVisible(true);
        this.id.setBackground(Color.lightGray); 
        this.descripcion.setBackground(Color.lightGray); 
    }
    
     /* Borrar los JtextFields de Estatus */
    public void borrar(){
        this.id.setText("");
        this.descripcion.setText("");
    }  
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AgregarEditar_estatus.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AgregarEditar_estatus.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AgregarEditar_estatus.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AgregarEditar_estatus.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
      /*  java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AgregarEditar_estatus().setVisible(true);
            }
        });*/
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.List Estatus;
    private javax.swing.JButton agregar;
    private javax.swing.JButton cancelar;
    private javax.swing.JTextField descripcion;
    private javax.swing.JButton editar;
    private javax.swing.JButton guardar;
    private javax.swing.JTextField id;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JComboBox select_estatus;
    // End of variables declaration//GEN-END:variables
}
